;(function ( $, window, undefined ) {
    var pluginName = 'defaultPluginName',
        document = window.document,
        defaults = {
            propertyName: "value"
        };

    var plugin_prototype = {
        // properties
        val_1:null,
        val_2:null,
        $el:$(this.element),
        
        // methods
        init: function () {
            // Place initialization logic here
        },
    };
    // Generally-speaking, there should be no need to edit the rest of this
    function Plugin( element, options ) {
        this.element = element;
        this.options = $.extend( {}, defaults, options) ;
        this._defaults = defaults;
        this._name = pluginName;
        this.init();
    }
    $.extend(Plugin.prototype, plugin_prototype);
    $.fn[pluginName] = function(options){
        if ($(this).length == 0) return false;
        var isMethodCall = (typeof options == 'string'),
    		args = Array.prototype.slice.call(arguments, 1);
    	if (isMethodCall && options.substring(0, 1) == '_') { return this;}
    	return this.each(function() {
    		var instance = $(this).data(pluginName);
    		(!instance && !isMethodCall &&
    			$(this).data(pluginName, new Plugin(this, options)));
    		(instance && isMethodCall && $.isFunction(instance[options]) &&
    			instance[options].apply(instance, args));
    	});
    }
}(jQuery, window));